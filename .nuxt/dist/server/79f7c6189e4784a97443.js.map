{"version":3,"file":"79f7c6189e4784a97443.js","sources":["webpack:///./node_modules/aos/dist/aos.css","webpack:///./components/blocks/Main.vue?0ec5","webpack:///./plugins/H2.js","webpack:///./plugins/Title.js","webpack:///./components/blocks/Main.vue","webpack:///./plugins/H3.js","webpack:///./components/elements/Project.vue"],"sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../css-loader/dist/cjs.js??ref--5-oneOf-1-1!../../postcss-loader/src/index.js??ref--5-oneOf-1-2!./aos.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\nrequire(\"!../../vue-style-loader/lib/addStylesServer.js\").default(\"3d39bbb8\", content, true)","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"main\"},[_vm._ssrNode(\"<script type=\\\"x-shader/x-vertex\\\" id=\\\"wrapVertexShader\\\">\\n    attribute float size;\\n    attribute vec3 color;\\n    varying vec3 vColor;\\n    void main() {\\n      vColor = color;\\n      vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n      gl_PointSize = size * ( 350.0 / - mvPosition.z );\\n      gl_Position = projectionMatrix * mvPosition;\\n    }\\n  </script> <script type=\\\"x-shader/x-fragment\\\" id=\\\"wrapFragmentShader\\\">\\n    varying vec3 vColor;\\n    uniform sampler2D texture;\\n    void main(){\\n      vec4 textureColor = texture2D( texture, gl_PointCoord );\\n      if ( textureColor.a &lt; 0.3 ) discard;\\n      vec4 color = vec4(vColor.xyz, 1.0) * textureColor;\\n      gl_FragColor = color;\\n    }\\n  </script> <canvas id=\\\"scene\\\"></canvas> \"),_vm._ssrNode(\"<div class=\\\"title\\\">\",\"</div>\",[_c('H1',{attrs:{\"typed\":\"normal\",\"data-aos\":\"zoom-in\",\"data-aos-duration\":\"1000\"}},[_vm._v(\"Andrey Wayne\")]),_vm._ssrNode(\" \"),_c('H2',{attrs:{\"typed\":\"main\",\"data-aos\":\"fade-up\",\"data-aos-duration\":\"1500\"}},[_vm._v(\"Креативный frontend разработчик\")])],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<div class=\\\"scroll\\\">\",\"</div>\",[_vm._ssrNode(\"<img src=\\\"/img/arrow-scroll.svg\\\"> \"),_c('Title',{attrs:{\"typed\":\"min\"}},[_vm._v(\"\\n      s\\n      \"),_c('br'),_vm._v(\"\\n      c\\n      \"),_c('br'),_vm._v(\"\\n      r\\n      \"),_c('br'),_vm._v(\"\\n      o\\n      \"),_c('br'),_vm._v(\"\\n      l\\n      \"),_c('br'),_vm._v(\"\\n      l\\n    \")])],2),_vm._ssrNode(\"\\n  .scroll\\n    .scroll-title\\n      Title(typed='min')\\n        | s\\n        br\\n        | c\\n        br\\n        | r\\n        br\\n        | o\\n        br\\n        | l\\n        br\\n        | l\\n\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import styled, { css } from 'vue-styled-components'\n\nconst config = {\n  typed: String,\n  styled: ''\n}\n\nexport default styled('h2', config)`\n  ${props => {\n    switch (props.typed) {\n      case 'main':\n        return css`\n          font-family: Medium;\n          font-size: 24px;\n          color: #FFFFFF;\n          letter-spacing: 0.5px;\n          @media screen and (max-width: 1279px) {\n            font-size: 18px;\n          }\n        `\n      case 'big':\n        return css`\n          font-family: Medium;\n          font-size: 125px;\n          color: white;\n          line-height: 140px;\n          letter-spacing: 0.5px;\n          @media screen and (max-width: 1279px) {\n            font-size: 24px;\n            line-height: 28px;\n          }\n        `\n      case 'footer':\n        return css`\n          font-family: Medium;\n          font-size: 70px;\n          line-height: 72px;\n          color: white;\n          @media screen and (max-width: 1279px) {\n            font-size: 24px;\n            line-height: 28px;\n          }\n        `\n    }\n  }}\n`\n","import styled, { css } from 'vue-styled-components'\n\nconst config = {\n  typed: String,\n  styled: ''\n}\n\nexport default styled('p', config)`\n  ${props => {\n    switch (props.typed) {\n      case 'normal':\n        return css`\n          font-family: Light;\n          font-size: 18px;\n          color: #FFFFFF;\n          letter-spacing: 0.5px;\n          line-height: 35px;\n        `\n      case 'min':\n        return css`\n          font-family: Light;\n          font-size: 14px;\n          color: #FFFFFF;\n        `\n    }\n  }}\n`\n","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AppLogo from '~/components/AppLogo.vue'\nimport TweenMax from 'gsap'\nconst THREE = require('three');\nimport H1 from '~/plugins/H1'\nimport H2 from '~/plugins/H2'\nimport AOS from 'aos'\nimport 'aos/dist/aos.css'\nimport Title from '~/plugins/Title'\nexport default {\n  components: {\n    H1,\n    H2,\n    Title\n  },\n  methods: {\n    ot() {\n    {\n    \tsetTimeout(() => document.body.classList.add('render'), 60);\n    \tconst navdemos = Array.from(document.querySelectorAll('nav.demos > .demo'));\n    \tconst total = navdemos.length;\n    \tconst current = navdemos.findIndex(el => el.classList.contains('demo--current'));\n    \tconst navigate = (linkEl) => {\n    \t\tdocument.body.classList.remove('render');\n    \t\tdocument.body.addEventListener('transitionend', () => window.location = linkEl.href);\n    \t};\n    \tnavdemos.forEach(link => link.addEventListener('click', (ev) => {\n    \t\tev.preventDefault();\n    \t\tnavigate(ev.target);\n    \t}));\n    \tdocument.addEventListener('keydown', (ev) => {\n    \t\tconst keyCode = ev.keyCode || ev.which;\n    \t\tlet linkEl;\n    \t\tif ( keyCode === 37 ) {\n    \t\t\tlinkEl = current > 0 ? navdemos[current-1] : navdemos[total-1];\n    \t\t}\n    \t\telse if ( keyCode === 39 ) {\n    \t\t\tlinkEl = current < total-1 ? navdemos[current+1] : navdemos[0];\n    \t\t}\n    \t\telse {\n    \t\t\treturn false;\n    \t\t}\n    \t\tnavigate(linkEl);\n    \t});\n    }\n  },\n  canvas() {\n    var canvas = document.querySelector('canvas');\nvar width = canvas.offsetWidth,\n    height = canvas.offsetHeight;\n\nvar colors = [\n    new THREE.Color(0xc70efe),\n    new THREE.Color(0x96789f),\n    new THREE.Color(0x535353)];\n\nvar renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    antialias: true,\n    alpha: true\n});\nrenderer.setPixelRatio(window.devicePixelRatio > 1 ? 2 : 1);\nrenderer.setSize(width, height);\n// renderer.setClearColor(0xac1122);\n\nvar scene = new THREE.Scene();\n\nvar raycaster = new THREE.Raycaster();\nraycaster.params.Points.threshold = 6;\n\n\nvar camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 2000);\ncamera.position.set(0, 0, 350);\n\nvar galaxy = new THREE.Group();\nscene.add(galaxy);\n\n// Create dots\nvar loader = new THREE.TextureLoader();\nloader.crossOrigin = \"\";\nvar dotTexture = loader.load(\"/img/dotTexture.png\");\nvar dotsAmount = 3000;\nvar dotsGeometry = new THREE.Geometry();\nvar positions = new Float32Array(dotsAmount * 3);\n\nvar sizes = new Float32Array(dotsAmount);\nvar colorsAttribute = new Float32Array(dotsAmount * 3);\nfor (var i = 0; i < dotsAmount; i++) {\n    var vector = new THREE.Vector3();\n\n    vector.color = Math.floor(Math.random() * colors.length);\n    vector.theta = Math.random() * Math.PI * 2;\n    vector.phi =\n        (1 - Math.sqrt(Math.random())) *\n        Math.PI /\n        2 *\n        (Math.random() > 0.5 ? 1 : -1);\n\n    vector.x = Math.cos(vector.theta) * Math.cos(vector.phi);\n    vector.y = Math.sin(vector.phi);\n    vector.z = Math.sin(vector.theta) * Math.cos(vector.phi);\n    vector.multiplyScalar(120 + (Math.random() - 0.5) * 5);\n    vector.scaleX = 5;\n\n    if (Math.random() > 0.5) {\n        moveDot(vector, i);\n    }\n    dotsGeometry.vertices.push(vector);\n    vector.toArray(positions, i * 3);\n    colors[vector.color].toArray(colorsAttribute, i*3);\n    sizes[i] = 5;\n}\n\nfunction moveDot(vector, index) {\n        var tempVector = vector.clone();\n        tempVector.multiplyScalar((Math.random() - 0.5) * 0.2 + 1);\n        TweenMax.to(vector, Math.random() * 3 + 3, {\n            x: tempVector.x,\n            y: tempVector.y,\n            z: tempVector.z,\n            yoyo: true,\n            repeat: -1,\n            delay: -Math.random() * 3,\n            ease: Power0.easeNone,\n            onUpdate: function () {\n                attributePositions.array[index*3] = vector.x;\n                attributePositions.array[index*3+1] = vector.y;\n                attributePositions.array[index*3+2] = vector.z;\n            }\n        });\n}\n\nvar bufferWrapGeom = new THREE.BufferGeometry();\nvar attributePositions = new THREE.BufferAttribute(positions, 3);\nbufferWrapGeom.addAttribute('position', attributePositions);\nvar attributeSizes = new THREE.BufferAttribute(sizes, 1);\nbufferWrapGeom.addAttribute('size', attributeSizes);\nvar attributeColors = new THREE.BufferAttribute(colorsAttribute, 3);\nbufferWrapGeom.addAttribute('color', attributeColors);\nvar shaderMaterial = new THREE.ShaderMaterial({\n    uniforms: {\n        texture: {\n            value: dotTexture\n        }\n    },\n    vertexShader: document.getElementById(\"wrapVertexShader\").textContent,\n    fragmentShader: document.getElementById(\"wrapFragmentShader\").textContent,\n    transparent:true\n});\nvar wrap = new THREE.Points(bufferWrapGeom, shaderMaterial);\nscene.add(wrap);\n\n// Create white segments\nvar segmentsGeom = new THREE.Geometry();\nvar segmentsMat = new THREE.LineBasicMaterial({\n    color: 0xffffff,\n    transparent: true,\n    opacity: 0.3,\n    vertexColors: THREE.VertexColors\n});\nfor (i = dotsGeometry.vertices.length - 1; i >= 0; i--) {\n    vector = dotsGeometry.vertices[i];\n    for (var j = dotsGeometry.vertices.length - 1; j >= 0; j--) {\n        if (i !== j && vector.distanceTo(dotsGeometry.vertices[j]) < 12) {\n            segmentsGeom.vertices.push(vector);\n            segmentsGeom.vertices.push(dotsGeometry.vertices[j]);\n            segmentsGeom.colors.push(colors[vector.color]);\n            segmentsGeom.colors.push(colors[vector.color]);\n        }\n    }\n}\nvar segments = new THREE.LineSegments(segmentsGeom, segmentsMat);\ngalaxy.add(segments);\n\nvar hovered = [];\nvar prevHovered = [];\nfunction render(a) {\n    var i;\n    dotsGeometry.verticesNeedUpdate = true;\n    segmentsGeom.verticesNeedUpdate = true;\n\n    raycaster.setFromCamera( mouse, camera );\n    var intersections = raycaster.intersectObjects([wrap]);\n    hovered = [];\n    if (intersections.length) {\n        for(i = 0; i < intersections.length; i++) {\n            var index = intersections[i].index;\n            hovered.push(index);\n            if (prevHovered.indexOf(index) === -1) {\n                onDotHover(index);\n            }\n         }\n    }\n    for(i = 0; i < prevHovered.length; i++){\n        if(hovered.indexOf(prevHovered[i]) === -1){\n            mouseOut(prevHovered[i]);\n        }\n    }\n    prevHovered = hovered.slice(0);\n    attributeSizes.needsUpdate = true;\n    attributePositions.needsUpdate = true;\n    renderer.render(scene, camera);\n}\n\nfunction onDotHover(index) {\n    dotsGeometry.vertices[index].tl = new TimelineMax();\n    dotsGeometry.vertices[index].tl.to(dotsGeometry.vertices[index], 1, {\n        scaleX: 10,\n        ease: Elastic.easeOut.config(2, 0.2),\n        onUpdate: function() {\n            attributeSizes.array[index] = dotsGeometry.vertices[index].scaleX;\n        }\n    });\n}\n\nfunction mouseOut(index) {\n    dotsGeometry.vertices[index].tl.to(dotsGeometry.vertices[index], 0.4, {\n        scaleX: 5,\n        ease: Power2.easeOut,\n        onUpdate: function() {\n            attributeSizes.array[index] = dotsGeometry.vertices[index].scaleX;\n        }\n    });\n}\n\nfunction onResize() {\n    canvas.style.width = '';\n    canvas.style.height = '';\n    width = canvas.offsetWidth;\n    height = canvas.offsetHeight;\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(width, height);\n}\n\nvar mouse = new THREE.Vector2(-100,-100);\nfunction onMouseMove(e) {\n    var canvasBounding = canvas.getBoundingClientRect();\n    mouse.x = ((e.clientX - canvasBounding.left) / width) * 2 - 1;\n    mouse.y = -((e.clientY - canvasBounding.top) / height) * 2 + 1;\n}\n\nTweenMax.ticker.addEventListener(\"tick\", render);\nwindow.addEventListener(\"mousemove\", onMouseMove);\nvar resizeTm;\nwindow.addEventListener(\"resize\", function(){\n    resizeTm = clearTimeout(resizeTm);\n    resizeTm = setTimeout(onResize, 200);\n});\n  }\n  },\n  mounted() {\n    this.ot()\n    this.canvas()\n  },\n}\n","import styled, { css } from 'vue-styled-components'\n\nconst config = {\n  typed: String,\n  styled: ''\n}\n\nexport default styled('h3', config)`\n  ${props => {\n    switch (props.typed) {\n      case 'project':\n        return css`\n          font-family: Medium;\n          font-size: 24px;\n          color: #FFFFFF;\n          letter-spacing: 0.5px;\n          @media screen and (max-width: 1279px) {\n            font-size: 18px;\n          }\n        `\n    }\n  }}\n`\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--2-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Project.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--2-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Project.vue?vue&type=script&lang=js&\""],"mappings":"AAGA;;;;;;;ACHA;;;;;;;;;;ACEA;AAMA;;;;;;;;AAYA;;;;;;;;;;AAYA;;;;;;;;;;AC9BA;AAMA;;;;;;AAUA;;;;;AC8CA;ACxDA;;;;;;;;;ACRA","sourceRoot":""}